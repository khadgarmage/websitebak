<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Khadgar Blog</title>
    <description></description>
    <link>http://khadgar.me/</link>
    <atom:link href="http://khadgar.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 14 Feb 2018 10:32:00 +0800</pubDate>
    <lastBuildDate>Wed, 14 Feb 2018 10:32:00 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>软件管理</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;包管理工具&lt;/h2&gt;
&lt;p&gt;软件开发过程中，会用到第三方库，但是这些第三方库或者框架往往又依赖其他第三方库或者框架，如果手工管理依赖关系会非常复杂，因为不仅要下载而且还要处理包之间的兼容关系，并且如果要进行更新版本那更是痛苦。&lt;br /&gt;
其主要功能就是安装及安装依赖，更新，卸载等操作。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;主流包管理工具&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;语言&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;包管理工具&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;配置文件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Node.js&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;NPM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;package.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;前端JS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bower&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bower.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Java&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Maven&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pom.xml&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Pip&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pip.conf(ini)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ruby&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gem&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.gemspec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Php&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Composer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;composer.json&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;php&quot;&gt;PHP包管理工具&lt;/h4&gt;
&lt;p&gt;PHP包管理工具有PEAR，PECL，Composer。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PEAR&lt;br /&gt;
Php Extension Application Repository php 扩展和应用仓库，为 php 的工具类库。&lt;/li&gt;
  &lt;li&gt;PECL&lt;br /&gt;
PHP Extension Community Library php 的 C 扩展仓库，即 php 的 so 格式的扩展&lt;/li&gt;
  &lt;li&gt;Composer&lt;br /&gt;
PHP依赖管理工具
    &lt;h6 id=&quot;pear-vs-pecl&quot;&gt;PEAR VS PECL&lt;/h6&gt;
    &lt;p&gt;PEAR是用PHP写的库，PECL是用C写的PHP扩展库。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#这是一个安装 pear 的 php 发行包文件
wget http://pear.php.net/go-pear.phar

#执行安装pear和pecl
php go-pear.phar

#pear安装DB
pear install DB

#pecl安装Redis,生成redis.so，加入到php.ini即可
pecl install redis

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;pear-vs-composer&quot;&gt;PEAR VS Composer&lt;/h6&gt;
&lt;p&gt;两者都可以用来管理PHP软件包，安装、更新以及卸载。
PEAR对于包的维护者来说，比较麻烦。所以很多代码已经过期了；此外相比Composer，PEAR的安装软件包比较少；使用Composer，可以基于每个项目或者全局安装软件包，而PEAR只能全局安装，如果需要不同版本的话可能造成冲突；Composer通过配置可以安装PEAR扩展包.&lt;/p&gt;

&lt;h2 id=&quot;composer&quot;&gt;Composer&lt;/h2&gt;
&lt;h4 id=&quot;section-2&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;Composer要求PHP环境必须是5.3.2+才能运行。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;section-3&quot;&gt;使用&lt;/h4&gt;
&lt;p&gt;在项目目录下创建一个 composer.json 文件，指明依赖，比如，你的项目依赖 monolog：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;require&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;monolog/monolog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.2.*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;br /&gt;
composer install&lt;/li&gt;
  &lt;li&gt;自动加载&lt;br /&gt;
Composer 提供了自动加载的特性，require ‘vendor/autoload.php’，需要在代码初始化时增加这行代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;延伸阅读 https://getcomposer.org/&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://khadgar.me/2017/02/06/Software-management-Software/</link>
        <guid isPermaLink="true">http://khadgar.me/2017/02/06/Software-management-Software/</guid>
        
        <category>软件</category>
        
        <category>依赖管理</category>
        
        <category>PHP</category>
        
        
      </item>
    
      <item>
        <title>软件管理</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;包安装&lt;/h2&gt;
&lt;h4 id=&quot;rpm--dpkg&quot;&gt;RPM &amp;amp; DPKG&lt;/h4&gt;
&lt;p&gt;Linux系统安装软件的方式有几种，编译安装，rpm，dpkg等，其中主流的是rpm和dpkg。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Distribution代表&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;软件管理机制&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;使用指令&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;线上升级机制&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Red Hat/Fedora&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rpm, rpmbuild&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;YUM (yum)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Debian/Ubuntu&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DPKG&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dpkg&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;APT (apt-get)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;rpm--srpm&quot;&gt;RPM &amp;amp; SRPM&lt;/h4&gt;
&lt;p&gt;RPM是直接编译好的软件格式，可以直接安装，但是要求安装环境和RPM编辑环境一致或者相当才可以安装。SRPM是带有源码的软件，可以通过修改配置，在安装环境下先编译成RPM文件，然后再进行安装可以解决这个问题。&lt;/p&gt;

&lt;h4 id=&quot;rpm&quot;&gt;RPM命名介绍&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xx.rpm   &amp;lt;==RPM的格式，已经变编译切打包完成的rpm软件;  &lt;br /&gt;
xx.src.rpm &amp;lt;==SRPM的格式，包括源码，需要编译成RPM，才能安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;test -        3.11   -     5        .el7.x86_64  .rpm&lt;br /&gt;
软件名称    软件版本 发布次数 平台 文档后缀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;i386, i586, i686, noarch, x86_64表示平台，其中noarch表示不区分平台&lt;/p&gt;

&lt;h4 id=&quot;rpm-1&quot;&gt;RPM安装路径&lt;/h4&gt;
&lt;p&gt;|路径|说明|
|—-|—-|
|/etc|配置文件目录|
|/usr/bin|可执行文件|
|/usr/lib|可执行文件使用的动态链接库|
|/usr/share/doc|软件使用说明文档|
|/usr/share/man|man page文档|&lt;/p&gt;

&lt;h4 id=&quot;rpm-2&quot;&gt;RPM命令&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 安装
rpm -ivh /mnt/xxx/test.rpm

# 网络安装
rpm -ivh http://web.com/mnt/xxx/test.rpm

# --prefix /usr/local 指安装到/usr/local而非正规目录

# 升级更新
rpm -Fvh /mnt/xxx/test.rpm

# 查询
rpm -qa | grep xx

# 查询配置文件路径
rpm -qc httpd

# 重建资料库
rpm --rebuilddb

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;yum&quot;&gt;YUM&lt;/h4&gt;
&lt;p&gt;yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令。&lt;/p&gt;

&lt;h6 id=&quot;section-1&quot;&gt;命令&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 安装 -y提示确定自动输入y
rpm install -y php70

# 查找软件
yum search raid

# 查看软件功能 
yum info mdadm

# 列出所有软件
yum list

# 列出所有需要升级的软件
yum list updates

# 查询配置文件路径
rpm -qc httpd

# 重建资料库
rpm --rebuilddb

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;section-2&quot;&gt;配置&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@study ~]# vim /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;amp;arch=$basearch&amp;amp;repo=os&amp;amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;[base]：软件库的名字，中括号必须有，里面的名称随意取，但是不能重复。&lt;/li&gt;
  &lt;li&gt;name：名字而已。&lt;/li&gt;
  &lt;li&gt;mirrorlist=：列出软件库可以使用的镜像列表，如果设置yum会自动挑选镜像。&lt;/li&gt;
  &lt;li&gt;baseurl=：可以指定的固定软件库地址。&lt;/li&gt;
  &lt;li&gt;enable=1：1启用，0不启用&lt;/li&gt;
  &lt;li&gt;gpgcheck=1：指定是否需要查阅 RPM 档桉内的数位签名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改完配置需要执行yum clean all，使得配置修改生效~&lt;/p&gt;

&lt;h6 id=&quot;section-3&quot;&gt;软件库&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;每个系统都会有官方和第三方提供的软件库，如CentOS库的链接
https://www.centos.org/docs/5/html/yum/sn-yum-maintenance.html
https://wiki.centos.org/AdditionalResources/Repositories&lt;/li&gt;
  &lt;li&gt;其中PHP常用的YUM Repository如下:&lt;br /&gt;
webtatic https://webtatic.com/&lt;br /&gt;
remi http://rpms.remirepo.net/&lt;br /&gt;
基于稳定性考虑，建议官方列表里推荐的remi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;configure 根据系统环境和选项配置，生成Makefile文件
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--srcdir=DIR
源代码文件所在目录，默认为configure脚本所在目录或其父目录。
--prefix=PREFIX
体系无关文件的顶级安装目录PREFIX ，默认值一般是 /usr/local 或 /usr/local/pkgName
--exec-prefix=EPREFIX
体系相关文件的顶级安装目录EPREFIX ，默认值一般是 PREFIX
--bindir=DIR
用户可执行文件的存放目录DIR ，默认值一般是 EPREFIX/bin
--sbindir=DIR
系统管理员可执行目录DIR ，默认值一般是 EPREFIX/sbin
--libexecdir=DIR
程序可执行目录DIR ，默认值一般是 EPREFIX/libexec
--datadir=DIR
通用数据文件的安装目录DIR ，默认值一般是 PREFIX/share
--sysconfdir=DIR
只读的单一机器数据目录DIR ，默认值一般是 PREFIX/etc
--sharedstatedir=DIR
可写的体系无关数据目录DIR ，默认值一般是 PREFIX/com
--localstatedir=DIR
可写的单一机器数据目录DIR ，默认值一般是 PREFIX/var
--libdir=DIR
库文件的安装目录DIR ，默认值一般是 EPREFIX/lib
--includedir=DIR
C头文件目录DIR ，默认值一般是 PREFIX/include
--oldincludedir=DIR
非gcc的C头文件目录DIR ，默认值一般是 /usr/include
--infodir=DIR
Info文档的安装目录DIR ，默认值一般是 PREFIX/info
--mandir=DIR
Man文档的安装目录DIR ，默认值一般是 PREFIX/man
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;refrence&quot;&gt;Refrence&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;http://linux.vbird.org/linux_basic/0520rpm_and_srpm.php&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://khadgar.me/2017/01/20/Software-management-System/</link>
        <guid isPermaLink="true">http://khadgar.me/2017/01/20/Software-management-System/</guid>
        
        <category>系统管理</category>
        
        <category>OPS</category>
        
        
      </item>
    
  </channel>
</rss>
